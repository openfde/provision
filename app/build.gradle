plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.android.oobe"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 31
        versionName "1.0.31"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.debug
        }
        debug {
//            applicationIdSuffix '.debug'
            minifyEnabled false
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFile != null && outputFileName.endsWith('.apk')) {
                outputFileName = "provision.apk"
            }
        }
        def buildType = variant.buildType.name
        if (buildType == "debug") {
            variant.outputs.all { output ->
                output.processManifest.doLast {
                    // Stores the path to the maifest.
                    String manifestPath = variant.outputs[0].getProcessResourcesProvider().get().manifestFile
                    def appLabel = android.defaultConfig.buildConfigFields.app_label
                    // Stores the contents of the manifest.
                    def manifestContent = file(manifestPath).getText()
                    println(appLabel)
                    // Changes the version code in the stored text.
                    manifestContent = manifestContent.replace('android:label="@string/app_name"',
                            'android:label="provision Application"')
                    // Overwrites the manifest with the new text.
                    file(manifestPath).write(manifestContent)
                }
            }
        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        Set<File> fileSet = options.bootstrapClasspath.getFiles()
        List<File> newFileList =  new ArrayList<>();
        newFileList.add(new File("libs/framework.jar"))
        newFileList.add(new File("libs/settingslib.jar"))
        newFileList.addAll(fileSet)
        options.bootstrapClasspath = files(
                newFileList.toArray()
        )
    }
}

repositories {
    flatDir {
        dir "../${project.name}/libs"
    }
}

dependencies {
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'me.yokeyword:indexablerecyclerview:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.4.0'

    implementation 'com.squareup.okhttp:okhttp:2.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.5.0'
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation ("org.greenrobot:eventbus:3.3.1")

    implementation files('libs/settingslib.jar')
    compileOnly files('libs/framework.jar')

}